import { useTranslations } from "next-intl";
import Head from "next/head";

import { CiTimer, CiCloud, CiSettings } from "react-icons/ci";
import { IconContext } from "react-icons";

import useSWR from "swr";

import Link from "next/link";
import { useSyncExternalStore } from "react";
import useLocalStorageState from "use-local-storage-state";
import { colorOptions } from "../components/settings/SettingsProps";
import { useAppDispatch } from "../redux/hooks";
import { setDialogOpened } from "../redux/theme/settingSlice";
import SettingsDialog from "../components/settings/SettingsDialog";
import useIsServerRender from "../components/general/ServerRender";

export default function Home() {
  const t = useTranslations("Home");

  const isServerRender = useIsServerRender();

  const dispatch = useAppDispatch();

  const { data, error } = useSWR<string>(
    "https://v1.jinrishici.com/rensheng/lizhi.txt"
  );

  const [useUnsplash] = useLocalStorageState("useUnsplash", {
    defaultValue: true,
  });

  const [selectedColor] = useLocalStorageState("colorOption", {
    defaultValue: colorOptions[0],
  });

  return (
    <>
      <Head>
        <title>{t("title_head")}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SettingsDialog />
      <div
        className={
          !isServerRender
            ? useUnsplash
              ? "bg-main-unsplash bg-center bg-cover h-screen"
              : selectedColor.index == colorOptions[0].index
              ? "bg-main-blue bg-center bg-cover h-screen"
              : selectedColor.index == colorOptions[1].index
              ? "bg-main-amber bg-center bg-cover h-screen"
              : selectedColor.index == colorOptions[2].index
              ? "bg-main-fuchsia bg-center bg-cover h-screen"
              : "bg-main-rose bg-center bg-cover h-screen"
            : "bg-main-gray bg-center bg-cover h-screen"
        }
      >
        <main
          className={
            useUnsplash
              ? "backdrop-brightness-65 h-full w-full"
              : "h-full w-full"
          }
        >
          <div className="flex flex-col h-full">
            <div className="flex px-8 md:px-10 lg:px-12 pt-10 md:pt-12 lg:pt-14">
              <h1 className="text-4xl font-bold text-white">
                {t("title_head")}
              </h1>
              <div className="text-white">Beta</div>
              <div className="grow flex justify-end">
                <button onClick={() => dispatch(setDialogOpened(true))}>
                  <IconContext.Provider
                    value={{ color: "white", size: "2rem" }}
                  >
                    <CiSettings />
                  </IconContext.Provider>
                </button>
              </div>
            </div>
            <div className="text-xl text-slate-200 pl-8 md:pl-10 lg:pl-12 pt-2">
              {error || !data ? "" : data}
            </div>
            <div className="flex h-full gap-x-64 gap-y-4 justify-center items-center">
              <div className="bottomArea">
                <Link href="/tomato">
                  <button className="bg-white/40 px-8 py-8 rounded-full">
                    <IconContext.Provider
                      value={{ color: "white", size: "2rem" }}
                    >
                      <CiTimer />
                    </IconContext.Provider>
                  </button>
                </Link>
                <div className="text-white/80 text-center pt-4 text-lg">
                  {t("pomodoro")}
                </div>
              </div>
              <div className="bottomArea">
                <button className="bg-white/40 px-8 py-8 rounded-full">
                  <IconContext.Provider
                    value={{ color: "white", size: "2rem" }}
                  >
                    <CiCloud />
                  </IconContext.Provider>
                </button>
                <div className="text-white/80 text-center pt-4 text-lg">
                  {t("breathe")}
                </div>
              </div>
              <div className="bottomArea">
                <button className="bg-white/40 px-8 py-8 rounded-full">
                  <IconContext.Provider
                    value={{ color: "white", size: "2rem" }}
                  >
                    <CiSettings />
                  </IconContext.Provider>
                </button>
                <div className="text-white/80 text-center pt-4 text-lg">
                  {t("settings")}
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
}

export async function getStaticProps(context: any) {
  // If you don't use internationalized routing, define this statically.
  const locale = context.locale;

  return {
    props: {
      // You can get the messages from anywhere you like. The recommended
      // pattern is to put them in JSON files separated by language.
      messages: (await import(`../i18n/${locale}.json`)).default,
    },
  };
}
